Below is a complete functional spec plus reference React/TypeScript code for the “SEO ROI Calculator” that lives on the Pricing page.
Hand it straight to a front-end dev — or drop it into Webflow/Framer code embeds — and it will work out of the box (just wire up styling to your design-system tokens).

1 · Core Experience
UX Goal	Interaction	Notes
Show the hard-dollar upside of Brandforce before checkout	Real-time calculator with sliders + dropdowns	No page reloads, instant feedback
Keep inputs minimal but editable	4 key inputs (industry, traffic, CVR, AOV)	Defaults auto-populate from benchmark data
Align with tier cards	Selecting a tier in the pricing grid syncs package cost inside the calculator	Highlights the “Most Popular” Growth tier ROI
Encourage lead capture	“Email me this report” button → prefilled audit form	Pass all calculator inputs as hidden fields

2 · Data Model & Benchmarks
ts
Copy
Edit
// *.ts or *.json — can also be CMS-driven
export const INDUSTRY_BENCHMARKS = {
  saas:   { upliftStarter: 0.50, upliftGrowth: 1.20, upliftEnterprise: 2.00, cvr: 0.03, aov: 250 },
  ecommerce: { upliftStarter: 0.40, upliftGrowth: 1.00, upliftEnterprise: 1.50, cvr: 0.02, aov: 65 },
  local:  { upliftStarter: 0.30, upliftGrowth: 0.80, upliftEnterprise: 1.20, cvr: 0.08, aov: 180 },
  content:{ upliftStarter: 0.60, upliftGrowth: 1.40, upliftEnterprise: 2.40, cvr: 0.01, aov: 20 },
} as const;

export const PACKAGE_COST = {
  starter:     899,
  growth:      1999,
  enterprise:  4500, // starting point – can be custom
};
upliftX = projected incremental sessions after 12 months, expressed as a multiple of current organic traffic
Example: upliftGrowth = 1.2 means +120 %.

cvr = median organic-to-sale/lead conversion rate.

aov = average order value or value per lead (USD).

Benchmarks come from Brandforce case-study medians plus industry reports; refresh every quarter in CMS.

3 · Calculation Logic
IncrementalTraffic
=
CurrentTraffic
×
UpliftFactor
IncrementalConversions
=
IncrementalTraffic
×
CVR
IncrementalRevenue
=
IncrementalConversions
×
AOV
ROI Ratio
=
IncrementalRevenue
−
AnnualCost
AnnualCost
PaybackMonths
=
AnnualCost
IncrementalRevenue
/
12
IncrementalTraffic
IncrementalConversions
IncrementalRevenue
ROI Ratio
PaybackMonths
​
  
=CurrentTraffic×UpliftFactor
=IncrementalTraffic×CVR
=IncrementalConversions×AOV
= 
AnnualCost
IncrementalRevenue−AnnualCost
​
 
= 
IncrementalRevenue/12
AnnualCost
​
 
​
 
Where AnnualCost = PackageCost × 12.

All outputs round to nearest whole number except ROI (1 decimal).

4 · UI Inputs
Label	Control	Range / Default
Industry	Select box	SaaS / Ecommerce / Local / Content
Current Monthly Organic Sessions	Slider + numeric input	0 – 100 000 (default = 5 000)
Conversion Rate (%)	Slider	0.1 – 20 (default from benchmark; user-editable)
Avg. Revenue per Conversion (USD)	Number input	default from benchmark
Package	Radio buttons synced to tier cards	Starter (default) / Growth / Enterprise

5 · Outputs
Incremental Traffic (12 mo)

Incremental Conversions

Incremental Revenue ($)

ROI Ratio (×)

Payback Period (months)

Display as large numbers with subtle count-up animation; add a small bar chart (Traffic vs Revenue) if desired.

6 · Reference React Component
tsx
Copy
Edit
// SeoRoiCalculator.tsx
import { useState, useMemo } from "react";
import { INDUSTRY_BENCHMARKS, PACKAGE_COST } from "@/data/seoBenchmarks";

type IndustryKey = keyof typeof INDUSTRY_BENCHMARKS;
type PackageKey = keyof typeof PACKAGE_COST;

export default function SeoRoiCalculator() {
  const [industry, setIndustry]         = useState<IndustryKey>("saas");
  const [pkg, setPkg]                   = useState<PackageKey>("starter");
  const [traffic, setTraffic]           = useState(5000);
  const [cvr, setCvr]                   = useState(
    INDUSTRY_BENCHMARKS[industry].cvr * 100
  );
  const [aov, setAov]                   = useState(
    INDUSTRY_BENCHMARKS[industry].aov
  );

  // auto-update CVR & AOV when industry changes
  const handleIndustryChange = (val: IndustryKey) => {
    setIndustry(val);
    setCvr(INDUSTRY_BENCHMARKS[val].cvr * 100);
    setAov(INDUSTRY_BENCHMARKS[val].aov);
  };

  const results = useMemo(() => {
    const uplift =
      INDUSTRY_BENCHMARKS[industry][
        `uplift${pkg.charAt(0).toUpperCase() + pkg.slice(1)}` as const
      ];
    const incrTraffic = traffic * uplift;
    const incrConversions = incrTraffic * (cvr / 100);
    const incrRevenue = incrConversions * aov;
    const annualCost = PACKAGE_COST[pkg] * 12;
    const roiRatio = (incrRevenue - annualCost) / annualCost;
    const paybackMonths =
      incrRevenue > 0 ? annualCost / (incrRevenue / 12) : Infinity;

    return {
      incrTraffic: Math.round(incrTraffic),
      incrConversions: Math.round(incrConversions),
      incrRevenue: Math.round(incrRevenue),
      roiRatio: +roiRatio.toFixed(1),
      paybackMonths: Math.round(paybackMonths),
    };
  }, [industry, pkg, traffic, cvr, aov]);

  return (
    <div className="grid gap-6 lg:grid-cols-2">
      {/* --- INPUTS --- */}
      <div className="space-y-4">
        <Select
          label="Industry"
          value={industry}
          onValueChange={handleIndustryChange}
          options={[
            { label: "SaaS", value: "saas" },
            { label: "E-commerce", value: "ecommerce" },
            { label: "Local Service", value: "local" },
            { label: "Content / Media", value: "content" },
          ]}
        />
        <SliderWithNumber
          label="Monthly Organic Sessions"
          min={0}
          max={100_000}
          step={100}
          value={traffic}
          onValueChange={setTraffic}
        />
        <SliderWithNumber
          label="Conversion Rate (%)"
          min={0.1}
          max={20}
          step={0.1}
          value={cvr}
          onValueChange={setCvr}
        />
        <NumberInput
          label="Avg. Revenue per Conversion ($)"
          value={aov}
          onValueChange={setAov}
        />
        <RadioGroup
          label="Package"
          value={pkg}
          onValueChange={(val: PackageKey) => setPkg(val)}
          options={[
            { label: "Starter", value: "starter" },
            { label: "Growth", value: "growth" },
            { label: "Enterprise", value: "enterprise" },
          ]}
        />
      </div>

      {/* --- OUTPUTS --- */}
      <div className="rounded-2xl bg-muted p-6 shadow-lg">
        <h3 className="mb-4 text-xl font-semibold">Your 12-Month Forecast</h3>
        <OutputLine label="Extra Organic Sessions" value={results.incrTraffic} />
        <OutputLine label="Extra Conversions" value={results.incrConversions} />
        <OutputLine
          label="Extra Revenue"
          value={`$${results.incrRevenue.toLocaleString()}`}
        />
        <OutputLine
          label="ROI"
          value={`${(results.roiRatio * 100).toFixed(0)} %`}
        />
        <OutputLine
          label="Payback"
          value={
            isFinite(results.paybackMonths)
              ? `${results.paybackMonths} mo`
              : "–"
          }
        />
        <button className="mt-6 w-full btn-primary">
          Email me this report
        </button>
      </div>
    </div>
  );
}
Dependencies: shadcn/ui components (Select, Slider, RadioGroup, etc.) or replace with your own; Tailwind classes match the design system defined earlier.

7 · Edge-Case Handling
Scenario	Handling
Traffic = 0	Disable ROI output, display “Add traffic to calculate.”
PaybackMonths > 60	Display “>5 yrs” and add tooltip suggesting Growth tier for faster ROI
AOV or CVR set to 0	Warn user (“Cannot calculate revenue with zero value.”)

8 · Accessibility & Performance
All inputs are <label><input/></label> pairs for screen-reader clarity.

Use aria-live="polite" on output container for dynamic updates.

Debounce slider to 150 ms to avoid re-render thrash.

No external calls; full calculation is client-side → zero latency.

9 · Embedding in Webflow/Framer
Framer: paste the component into a Code Component, import React.

Webflow: export the compiled JS bundle, add it via Custom Code in page footer; bind Webflow inputs using data-* hooks or keep bundled React root.

No-code: if code embedding isn’t an option, replicate formula in Wized/Airtable or use Make (Integromat) with JS module; UI built with native sliders.

10 · Hand-off Checklist
Deliverable	Status
benchmarkData.ts / .json	✅
SeoRoiCalculator.tsx	✅
Component docs (above)	✅
Wireframe annotation (“ROI slider block”)	🔲 (design to overlay)
GA event tracking spec (event_category="ROI Calculator")	🔲
Email-report Zapier flow (optional)	🔲

